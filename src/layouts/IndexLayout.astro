---
import Footer from "../components/Footer.astro";
import CommandMenu from "../components/CommandMenu.astro";
import ThemeToggle from "../components/ThemeToggle.astro";
import { cn } from "../lib/utils";
import "../styles/global.css";

interface Props {
  title: string;
  description: string;
  image?: string;
  className?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const {
  title,
  description = "Hi I'm Farooq. Welcome to my corner of the web.",
  image = "/static/blog-placeholder.png",
  className,
} = Astro.props;
---

<html lang="en">
  <head>
    <!-- Global Metadata -->
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />

    <!-- Critical resource preloads -->
    <link
      rel="preload"
      href="/fonts/geist-variable.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />
    <link
      rel="preload"
      href="/fonts/geist-mono-variable.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />
    
    <!-- DNS prefetch for external domains -->
    <link rel="dns-prefetch" href="//api.fontshare.com" />
    
    <!-- Preconnect to critical external origins -->
    <link rel="preconnect" href="https://api.fontshare.com" crossorigin />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=STIX+Two+Text:wght@400;500;600;700&display=swap" rel="stylesheet">

    <!-- Canonical URL -->
    <link rel="canonical" href={canonicalURL} />

    <!-- Primary Meta Tags -->
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(image, Astro.url)} />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={new URL(image, Astro.url)} />
    
    <!-- Critical CSS for immediate render -->
    <style>
      /* Prevent layout shift with base styles */
      body { 
        font-family: 'STIX Two Text', Georgia, "Times New Roman", Times, serif;
        line-height: 1.5;
        margin: 0;
      }
      .fade-in { opacity: 0; }
    </style>
    
    <!-- Preload theme to prevent flash -->
    <script is:inline>
      if (
        localStorage.theme === 'dark' ||
        (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)
      ) {
        document.documentElement.classList.add('dark');
      }
      
      // Performance monitoring (dev only)
      if (typeof performance !== 'undefined' && localStorage.getItem('dev-mode') === 'true') {
        window.addEventListener('load', () => {
          const loadTime = performance.timing.loadEventEnd - performance.timing.navigationStart;
          console.log(`ðŸš€ Page loaded in ${loadTime}ms`);
        });
      }
    </script>
  </head>
  <body
    class="text-zinc-900 antialiased dark:bg-zinc-900 dark:text-zinc-200"
  >
    <div class={cn("max-w-xl mx-auto p-4", className)}>
      <!-- Top header with name on left, controls on right -->
      <header class="mb-12 mt-4">
        <div class="flex items-center justify-between mb-4">
          <div>
            <a href="/" class="header-title">Farooq Qureshi</a>
          </div>
          <div class="flex items-center gap-2">
            <div
              id="command-menu-button"
              class="relative cursor-pointer text-black dark:text-white flexoki:text-flexoki-tx -mt-0.5"
              title="Open command menu (Ctrl+K / Cmd+K)"
            >
              <span class="text-xs hidden sm:inline text-black dark:text-white flexoki:text-flexoki-tx">
                ctrl + k
              </span>
              <svg class="w-4 h-4 sm:hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 2a10 10 0 1 0 0 20 10 10 0 0 0 0-20z"></path>
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2 12h20"></path>
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"></path>
              </svg>
            </div>
            <div>
              <ThemeToggle />
            </div>
          </div>
        </div>
      </header>
      
      <div class="fade-in">
        <slot />
        <Footer />
      </div>
      <CommandMenu />
    </div>
  </body>
</html>

<script is:inline>
  const setTheme = () => {
    let theme;

    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      theme = localStorage.getItem("theme");
    } else {
      // Default to light theme instead of system preference for consistency
      theme = "light";
    }

    // Apply the theme
    const html = document.documentElement;
    
    // Remove all theme classes first
    html.classList.remove("dark", "flexoki");
    
    // Add the appropriate theme class
    if (theme === "dark") {
      html.classList.add("dark");
    } else if (theme === "flexoki") {
      html.classList.add("flexoki");
    }
    // If theme is "light" or anything else, no class is added (default light theme)

    if (typeof localStorage !== "undefined") {
      const observer = new MutationObserver(() => {
        const isDark = html.classList.contains("dark");
        const isFlexoki = html.classList.contains("flexoki");
        
        let currentTheme = "light";
        if (isDark) currentTheme = "dark";
        else if (isFlexoki) currentTheme = "flexoki";
        
        localStorage.setItem("theme", currentTheme);
      });
      observer.observe(html, {
        attributes: true,
        attributeFilter: ["class"],
      });
    }
  };

  setTheme();

  document.addEventListener("astro:after-swap", setTheme);
</script>
