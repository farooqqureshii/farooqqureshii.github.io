---
// component import
import SpotifyNowPlaying from './SpotifyNowPlaying.astro';
---

<footer class="mt-12 footer-animate">
  <div class="flex flex-col gap-1 text-xs footer-line-color w-full">
    <div class="flex justify-start items-center w-full">
      <span class="flex items-center">
        <span>In Calgary, where it's currently</span>
        <span class="w-1"></span>
        <span id="calgary-time" class="opacity-0 transition-opacity duration-300">--:--</span>
        <span>.</span>
      </span>
    </div>
    <div style="margin-top:0.25rem; min-height:1.5rem;" class="opacity-0 translate-y-2 transition-all duration-500 ease-out" id="quote-container">
      <div id="quote-rotator" style="cursor:pointer; display:inline;">
        <span id="quote-text"></span>
      </div>
    </div>
    <!-- <SpotifyNowPlaying /> -->
  </div>

  <script>
    // Calgary time script
    function updateCalgaryTime() {
      const calgaryTime = new Date().toLocaleTimeString('en-CA', {
        timeZone: 'America/Edmonton',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        hour12: false
      });
      const el = document.getElementById('calgary-time');
      if (el) {
        el.textContent = calgaryTime;
        el.classList.remove('opacity-0');
      }
    }
    updateCalgaryTime();
    setInterval(updateCalgaryTime, 1000);

    // Quote rotator script
    const quotes = [
      { text: "The map is not the territory.", author: "Alfred Korzybski" },
      { text: "Not everything that counts can be counted, and not everything that can be counted counts.", author: "William Bruce Cameron" },
      { text: "We're all just walking each other home.", author: "Ram Dass" },
      { text: "And you? When will you begin that long journey into yourself?", author: "Rumi" },
      { text: "One must imagine Sisyphus happy.", author: "Albert Camus" },
      { text: "Don't use seven words when four will do.", author: "Rusty Ryan, Oceans Eleven" },
      { text: "A stitch in time saves nine.", author: "Proverb" },
      { text: "A wealth of information creates a poverty of attention.", author: "Herbert A. Simon" },
      { text: "Simple systems don't always give simple answers.", author: "John Gall" },
      { text: "You can't fix by analysis what you've bungled by design.", author: "Light Hill's Law" },
      { text: "Life moves pretty fast. If you don't stop and look around once in a while, you could miss it.", author: "Ferris Bueller's Day Off" },
      { text: "We don't see things as they are, we see them as we are.", author: "Anaïs Nin" },
      { text: "Nature does not hurry, yet everything is accomplished.", author: "Lao Tzu" },
      { text: "Only entropy comes easy.", author: "Anton Chekhov" },
      { text: "Meaning is not in things but in between.", author: "The Poetics of Space, Gaston Bachelard" },
      { text: "All that is gold does not glitter.", author: "The Fellowship of the Ring, J.R.R. Tolkien" },
      { text: "There's no place like home.", author: "Dorothy Gale, The Wizard of Oz" },
      { text: "Curiouser and curiouser!", author: "Alice, Alice in Wonderland" },
      { text: "Dream Big, Start Small", author: "Unknown" },
      { text: "Oh, but my darling, what if you fly?", author: "Erin Hanson" },
      { text: "Joy is what happens to us when we allow ourselves to recognize how good things really are.", author: "M. Kristin Rawlings" },
      { text: "Why make life difficult when it's so easy to live effortlessly?", author: "David Zinczenko" },
      { text: "A way of thinking that has value isn’t necessarily the way to do it.", author: "Leonardo da Vinci" },
      { text: "Wherever you go, go with all your heart.", author: "Confucius" },
      { text: "I am not the same, having seen the moon, than when I was the moon.", author: "G.K. Chesterton" },
      { text: "Get rid of anything that isn't essential to your truth, and you will see the truth clearly.", author: "David Lynch" },
      { text: "Be excellent to each other.", author: "The Hitchhiker's Guide to the Galaxy" },
      { text: "I am certain of nothing but the holiness of the heart's affections and the truth of the heart's yearnings.", author: "John Keats" },
      { text: "It's a funny thing. Life gets so busy. You've got to play to stay close.", author: "Andrew D. Holder" },
      { text: "First learn the rules, then break them.", author: "Dada" },
      { text: "Sometimes you win, sometimes you learn.", author: "John Maxwell" },
      { text: "Don't judge each day by the harvest you reap but by the seeds you plant.", author: "Robert Louis Stevenson" },
    ];
    let lastIndex = -1;
    let isTyping = false;

    async function typeText(element: HTMLElement, text: string, speed = 20) {
      element.innerHTML = '';
      for (let i = 0; i < text.length; i++) {
        element.innerHTML += text[i];
        await new Promise(resolve => setTimeout(resolve, speed));
      }
    }

    async function showRandomQuote() {
      if (isTyping) return; // Prevent multiple typing animations
      
      let idx;
      do {
        idx = Math.floor(Math.random() * quotes.length);
      } while (idx === lastIndex && quotes.length > 1);
      lastIndex = idx;
      const q = quotes[idx];
      const quoteTextEl = document.getElementById('quote-text');
      const quoteContainer = document.getElementById('quote-container');
      
      if (quoteTextEl && quoteContainer) {
        isTyping = true;
        
        // Slide in the quote container
        quoteContainer.classList.remove('opacity-0', 'translate-y-2');
        
        // Type the quote first
        await typeText(quoteTextEl, `"${q.text}" — `, 15);
        
        // Type the author in italics
        const authorText = q.author;
        for (let i = 0; i < authorText.length; i++) {
          quoteTextEl.innerHTML += authorText[i];
          await new Promise(resolve => setTimeout(resolve, 10));
        }
        // Wrap the author in italics after typing
        const currentText = quoteTextEl.innerHTML;
        const authorStart = currentText.lastIndexOf(q.author);
        if (authorStart !== -1) {
          const beforeAuthor = currentText.substring(0, authorStart);
          const afterAuthor = currentText.substring(authorStart + q.author.length);
          quoteTextEl.innerHTML = beforeAuthor + `<i>${q.author}</i>` + afterAuthor;
        }
        
        // Add the next quote icon
        quoteTextEl.innerHTML += `<svg width="12" height="12" viewBox="0 0 24 24" fill="currentColor" style="margin-left:0.5em; display:inline; vertical-align:middle;"><path d="M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"/></svg>`;
        
        isTyping = false;
      }
    }
    const quoteRotator = document.getElementById('quote-rotator');
    if (quoteRotator) {
      quoteRotator.onclick = showRandomQuote;
      // Start the quote animation quickly after page load
      setTimeout(() => {
        showRandomQuote();
      }, 100); // Much faster delay for snappier feel
    }
  </script>
</footer>
