---
import { SITE_DESCRIPTION, SITE_TITLE } from "../consts";
import Layout from "../layouts/Layout.astro";
---

<Layout
  title="Farooq Qureshi"
  description={SITE_DESCRIPTION}
  className="flex h-svh max-w-lg flex-col justify-center"
>
  <main class="space-y-4 no-theme-transition">
    <div class="w-full text-base">
      <p class="mb-3">Hi! I'm Farooq.</p>
      <p class="mb-3">
        I study Electrical Engineering at <a href="https://uottawa.ca" target="_blank">University of Ottawa</a>, and lead the team behind <a href="https://uOttaHack.ca" target="_blank">uOttaHack</a>.
      </p>
      <p class="mb-3">
        In my free time I teach competitive debating, and also love to <a href="/other/books" class="read-link">read</a>.
      </p>
    </div>
    
    <!-- Interactive Section -->
    <div class="mt-6">
      
      <!-- Links Section -->
      <div class="text-base">
        <p>Feel free to say <a href="mailto:farooq.qureshi@outlook.com">hello</a>, see my <a href="https://github.com/farooqqureshii" target="_blank">code</a>, browse my <a href="https://curius.app/farooq-qureshi" target="_blank">interests</a>, or view my <a href="https://linkedin.com/in/farooqq" target="_blank">experience</a>. Here's my <a href="https://drive.google.com/file/d/1sM9b3G5AbRIG-kDz68KOzGxeETeKm8rN/view?usp=sharing" target="_blank">résumé</a> too.</p>
      </div>
    </div>
  </main>
</Layout>


<style>
  /* Toggle Styles */
  .toggle-container {
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .toggle-btn {
    position: relative;
    width: 120px;
    height: 32px;
    background: #f3f4f6;
    border: 1px solid #d1d5db;
    border-radius: 16px;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0 8px;
  }
  
  html.dark .toggle-btn {
    background: #374151;
    border-color: #4b5563;
  }
  
  html.flexoki .toggle-btn {
    background: #F2F0E5;
    border-color: #CECDC3;
  }
  
  .toggle-slider {
    position: absolute;
    left: 2px;
    width: 28px;
    height: 28px;
    background: white;
    border-radius: 50%;
    transition: all 0.3s ease;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }
  
  html.dark .toggle-slider {
    background: #6b7280;
  }
  
  html.flexoki .toggle-slider {
    background: #FFFCF0;
  }
  
  .toggle-btn.active .toggle-slider {
    transform: translateX(88px);
  }
  
  .toggle-label {
    font-size: 12px;
    font-weight: 500;
    z-index: 1;
    transition: all 0.3s ease;
  }
  
  .toggle-label-left {
    color: #6b7280;
  }
  
  .toggle-label-right {
    color: #6b7280;
  }
  
  .toggle-btn.active .toggle-label-left {
    color: #374151;
  }
  
  .toggle-btn:not(.active) .toggle-label-right {
    color: #374151;
  }
  
  html.dark .toggle-label-left,
  html.dark .toggle-label-right {
    color: #9ca3af;
  }
  
  html.dark .toggle-btn.active .toggle-label-left {
    color: #f3f4f6;
  }
  
  html.dark .toggle-btn:not(.active) .toggle-label-right {
    color: #f3f4f6;
  }
  
  html.flexoki .toggle-label-left,
  html.flexoki .toggle-label-right {
    color: #6F6E69;
  }
  
  html.flexoki .toggle-btn.active .toggle-label-left {
    color: #100F0F;
  }
  
  html.flexoki .toggle-btn:not(.active) .toggle-label-right {
    color: #100F0F;
  }
  
  /* Social Links */
  .social-link {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    border-radius: 8px;
    transition: all 0.2s ease;
    color: #2563eb;
  }
  
  html.dark .social-link {
    color: #60a5fa;
  }
  
  html.flexoki .social-link {
    color: #24837B;
  }
  
  .social-link:hover {
    transform: skew(-10deg);
  }
  

  

  

  
  .guestbook-trigger {
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    padding: 0;
    border-radius: 6px;
    user-select: none;
    margin-bottom: 12px;
  }

  .guestbook-text {
    font-size: 1rem;
  }

  /* Arrow direction - points down by default, up when expanded */
  .guestbook-arrow {
    transform: rotate(0deg) !important;
  }

  /* Arrow points up when guestbook is expanded */
  .guestbook-trigger.guestbook-expanded .guestbook-arrow {
    transform: rotate(180deg) !important;
  }

  #guestbook-container.guestbook-content {
    max-height: 0 !important;
    opacity: 0 !important;
    overflow: hidden !important;
    transform: translateY(-10px) !important;
    margin-top: 0 !important;
    display: flex !important;
    align-items: center !important;
  }
  
  /* Separate transition class - instant transitions */
  #guestbook-container.guestbook-content.guestbook-animating {
    transition: none !important;
  }

  /* Expanded state */
  #guestbook-container.guestbook-content.guestbook-expanded {
    max-height: 60px !important;
    opacity: 1 !important;
    transform: translateY(0) !important;
    margin-top: 8px !important;
  }

  /* Prevent theme transitions on guestbook elements */
  #guestbook-container,
  #guestbook-container * {
    transition: none !important;
  }
  
  /* Keep only the dropdown animation, not theme transitions */
  #guestbook-container.guestbook-content {
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1) !important;
  }
  
  /* Override any global theme transitions for guestbook */
  #guestbook-container,
  #guestbook-container *,
  #guestbook-input,
  #guestbook-submit-btn {
    transition: color 0s !important;
    transition: background-color 0s !important;
    transition: border-color 0s !important;
  }
  
  /* Force instant theme switching for guestbook */
  #guestbook-container {
    border-color: var(--border-color) !important;
  }
  
  #guestbook-input {
    color: var(--text-color) !important;
    background-color: transparent !important;
  }
  
  #guestbook-input::placeholder {
    color: var(--placeholder-color) !important;
  }
  
  #guestbook-submit-btn {
    color: var(--button-color) !important;
  }
  
  /* CSS custom properties for instant theme switching */
  :root {
    --border-color: #e5e7eb;
    --text-color: #18181b;
    --placeholder-color: #71717a;
    --button-color: #71717a;
  }
  
  html.dark {
    --border-color: #3f3f46;
    --text-color: #fafafa;
    --placeholder-color: #a1a1aa;
    --button-color: #a1a1aa;
  }
  
  html.flexoki {
    --border-color: #CECDC3;
    --text-color: #100F0F;
    --placeholder-color: #6F6E69;
    --button-color: #6F6E69;
  }
  
  .animationComplete {
    animation-name: complete;
    animation-delay: 0.3s;
    animation-duration: 1.0s;
    animation-timing-function: ease-out;
    animation-fill-mode: backwards;
  }


</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Guestbook toggle functionality
    const guestbookTrigger = document.getElementById('guestbook-trigger');
    const guestbookContainer = document.getElementById('guestbook-container');
    
    if (guestbookTrigger && guestbookContainer) {
      guestbookTrigger.addEventListener('click', function(e) {
        e.preventDefault();
        
        // Add transition class before animation
        guestbookContainer.classList.add('guestbook-animating');
        
        // Force a reflow to ensure the animation works
        guestbookContainer.offsetHeight;
        
        guestbookContainer.classList.toggle('guestbook-expanded');
        guestbookTrigger.classList.toggle('guestbook-expanded');
        
        // Focus the input when expanded
        if (guestbookContainer.classList.contains('guestbook-expanded')) {
          const input = document.getElementById('guestbook-input');
          if (input) input.focus();
        }
      });
      
      // Remove transition class when animation completes
      guestbookContainer.addEventListener('transitionend', function(e) {
        if (e.target === guestbookContainer) {
          guestbookContainer.classList.remove('guestbook-animating');
        }
      });
    }

    // Guestbook functionality
    const guestbookInput = document.getElementById('guestbook-input') as HTMLInputElement;
    const guestbookSubmitBtn = document.getElementById('guestbook-submit-btn') as HTMLButtonElement;
    
    async function handleGuestbookSubmission(message: string) {
      // Store original values
      const originalPlaceholder = guestbookInput.placeholder;
      const originalValue = guestbookInput.value;
      
      // Disable input and button
      guestbookInput.disabled = true;
      guestbookSubmitBtn.disabled = true;
      
      try {
        const response = await fetch('/api/guestbook', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ message }),
        });
        
        if (response.ok) {
          // Fade out send button smoothly
          guestbookSubmitBtn.style.transition = 'opacity 0.3s ease-out';
          guestbookSubmitBtn.style.opacity = '0';
          
          // Simple success feedback
          guestbookInput.value = '';
          guestbookInput.placeholder = 'Sent!';
          
          // Reset after 2 seconds
          setTimeout(() => {
            guestbookInput.placeholder = originalPlaceholder;
            guestbookInput.disabled = false;
            guestbookSubmitBtn.disabled = false;
            
            // Fade send button back in
            guestbookSubmitBtn.style.opacity = '1';
            guestbookInput.focus();
          }, 2000);
        } else {
          throw new Error('Failed to send message');
        }
      } catch (error) {
        // Show error briefly
        guestbookInput.placeholder = 'Failed to send';
        guestbookInput.value = originalValue;
        
        setTimeout(() => {
          guestbookInput.placeholder = originalPlaceholder;
          guestbookInput.disabled = false;
          guestbookSubmitBtn.disabled = false;
        }, 2000);
      }
    }
    
    // Function to update Send button state
    function updateSendButton() {
      const message = guestbookInput?.value.trim();
      if (message && message.length > 0) {
        guestbookSubmitBtn!.classList.remove('text-zinc-500', 'dark:text-zinc-400', 'flexoki:text-flexoki-tx-2');
        guestbookSubmitBtn!.classList.add('text-zinc-900', 'dark:text-zinc-100', 'flexoki:text-flexoki-tx', 'hover:text-zinc-700', 'dark:hover:text-zinc-300', 'flexoki:hover:text-flexoki-tx-2', 'cursor-pointer');
      } else {
        guestbookSubmitBtn!.classList.remove('text-zinc-900', 'dark:text-zinc-100', 'flexoki:text-flexoki-tx', 'hover:text-zinc-700', 'dark:hover:text-zinc-300', 'flexoki:hover:text-flexoki-tx-2', 'cursor-pointer');
        guestbookSubmitBtn!.classList.add('text-zinc-500', 'dark:text-zinc-400', 'flexoki:text-flexoki-tx-2');
      }
    }
    
    // Event listeners
    guestbookSubmitBtn?.addEventListener('click', () => {
      const message = guestbookInput?.value.trim();
      if (message && message.length > 0) {
        handleGuestbookSubmission(message);
      }
    });
    
    guestbookInput?.addEventListener('input', updateSendButton);
    
    guestbookInput?.addEventListener('keydown', (e) => {
      if (e.key === 'Enter') {
        const message = guestbookInput.value.trim();
        if (message && message.length > 0) {
          handleGuestbookSubmission(message);
        }
      }
    });
  });
</script>
